{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/hello gatsby","result":{"data":{"markdownRemark":{"id":"35f7b0a5-d1e1-50e0-9dbe-1bc1ed098b55","html":"<h1 id=\"tldr\" style=\"position:relative;\"><a href=\"#tldr\" aria-label=\"tldr permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TL;DR</h1>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\n \nl <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>n<span class=\"token operator\">*</span><span class=\"token number\">2</span> <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># List comprehension</span>\ng <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">*</span><span class=\"token number\">2</span> <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Generator expression</span>\n \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;type 'list'></span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># &lt;type 'generator'></span>\n \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>getsizeof<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 9032</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>getsizeof<span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 80</span>\n \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 8</span>\n<span class=\"token comment\">#print(g[4])   # TypeError: 'generator' object has no attribute '__getitem__'</span></code></pre></div>\n<h1 id=\"iterable-객체란\" style=\"position:relative;\"><a href=\"#iterable-%EA%B0%9D%EC%B2%B4%EB%9E%80\" aria-label=\"iterable 객체란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>iterable 객체란</h1>\n<ol>\n<li>\n<p><strong>순회</strong>(traversal) 가 가능한가?</p>\n<ul>\n<li>즉 <code class=\"language-text\">for</code> 문으로 돌릴 수 있는가?</li>\n</ul>\n</li>\n<li>모든 <strong>순회</strong>가 끝났을 때 <code class=\"language-text\">Stopiteration</code> 에러를 반환하는가?</li>\n</ol>\n<blockquote>\n<p>위 2개 조건을 만족하면 iterable 객체라고 한다. 우리가 익숙한 <code class=\"language-text\">list</code>, <code class=\"language-text\">tuple</code>, <code class=\"language-text\">dictionary</code>, 심지어 <code class=\"language-text\">string</code> 까지 모두 (iterable 객체 자체는 아니지만)iterable 객체로 전환이 가능하다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">L <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\nt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\ndic <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span>\ns <span class=\"token operator\">=</span> <span class=\"token string\">'abcde'</span>\n\n<span class=\"token comment\"># iter 을 통해 ietrable 로 전환하였다.</span>\nit_obj <span class=\"token operator\">=</span> <span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span>\nit_obj\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>list_iterator at <span class=\"token number\">0x10c6e9910</span><span class=\"token operator\">></span>\n\n<span class=\"token comment\"># next 와 stopiteration</span>\n<span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>it_obj<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">1</span>\n<span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>it_obj<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">2</span>\n<span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>it_obj<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">3</span>\n<span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>it_obj<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> StopIteration<span class=\"token punctuation\">:</span></code></pre></div>\n<h1 id=\"iterator-이란\" style=\"position:relative;\"><a href=\"#iterator-%EC%9D%B4%EB%9E%80\" aria-label=\"iterator 이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>i<strong>terator 이란</strong></h1>\n<ul>\n<li><code class=\"language-text\">__iter__</code> 과 <code class=\"language-text\">__next__</code> 함수가 있는 객체를 말한다. <code class=\"language-text\">dir</code> 로 뜯어보며 살펴보자.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">L <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">#  __iter__ 함수가 들어있는 것을 확인할 수 있다.</span>\n<span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">**</span><span class=\"token string\">'**__iter__**'</span><span class=\"token operator\">**</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token string\">'sort'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 직접 __iter__ 함수를 출력한 자체를 print문을 사용해서 출력해보면 이터레이터 객체임을 확인할 수 있다.</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">.</span>__iter__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>list_iterator <span class=\"token builtin\">object</span> at <span class=\"token number\">0x10c41e250</span><span class=\"token operator\">></span>\n\n<span class=\"token comment\"># 즉, `iter()` 외에도 위 방법으로 __next__함수를 호출할수 있는 객체가 된다.</span>\n<span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>it_obj<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">1</span>\n<span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>it_obj<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">2</span>\n<span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>it_obj<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">3</span>\n<span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>it_obj<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> StopIteration<span class=\"token punctuation\">:</span></code></pre></div>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/da51f428-4322-439e-827e-0283fdf80d7b/Untitled.png\" alt=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/da51f428-4322-439e-827e-0283fdf80d7b/Untitled.png\"></p>\n<h1 id=\"generator-이란\" style=\"position:relative;\"><a href=\"#generator-%EC%9D%B4%EB%9E%80\" aria-label=\"generator 이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>genera<strong>tor 이란</strong></h1>\n<ul>\n<li><code class=\"language-text\">iterator</code> 의 일종이다. 따라서 마찬가지로 <code class=\"language-text\">__next__</code> 함수로 값을 꺼내올 수 있고 반복문이 끝나게 되면 <code class=\"language-text\">StopIteration</code> 이 발생한다.</li>\n<li><code class=\"language-text\">yield</code>(산출) 가 들어있으면 <code class=\"language-text\">generator</code> 객체를 준다.</li>\n<li>객체 자체에 <code class=\"language-text\">__iter__</code> 와 <code class=\"language-text\">__next__</code> 함수가 둘다 들어있어  이터레이터에서 처럼 <code class=\"language-text\">__iter__</code>를 호출한 후에 <code class=\"language-text\">__next__</code>함수를 호출하지 않고 <code class=\"language-text\">__next__</code>를 바로 호출할 수 도 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">li <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">gen</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> elem <span class=\"token keyword\">in</span> li<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">yield</span> elem\n\ng <span class=\"token operator\">=</span> gen<span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span>\ng\n<span class=\"token operator\">&lt;</span>generator <span class=\"token builtin\">object</span> gen at <span class=\"token number\">0x10c6e2ed0</span><span class=\"token operator\">></span>\n\n<span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token string\">'__iter__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__next__'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span></code></pre></div>\n<ul>\n<li>또한 send 함수를 통해 함수 연산 중간에 값을 전달할 수도 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">generator_send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    received_value <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        received_value <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"received_value = \"</span><span class=\"token punctuation\">,</span>end<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>received_value<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">yield</span> received_value <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n        \n        \ngen <span class=\"token operator\">=</span> generator_send<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> received_value <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">4</span>\n\n<span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> received_value <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">6</span>\n\n<span class=\"token comment\"># 이해하기 약간 난해하다. 어찌되었든 iterator 객체라는 관점에서 순환 가능한 배열을 받아들여야 하는데 이는 while True 로 (계속 실행되게) 대체 해주고 있다. 따라서 입력받는 숫자를 이어진 배열로 인식하게되고 다음 차례차례는 next 을 통해 넘어갈 수 있다.</span></code></pre></div>\n<h1 id=\"generator-expression-이란\" style=\"position:relative;\"><a href=\"#generator-expression-%EC%9D%B4%EB%9E%80\" aria-label=\"generator expression 이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>genera<strong>tor expression 이란</strong></h1>\n<ul>\n<li>제너레이터 함수외에도 제너레이터 표현식(generator expression)이 있다. 제너레이터 표현식은 직접적인 Lazy evaluation을 위해서 사용될 수 있다.</li>\n<li>아래 코드에서<code class=\"language-text\">[ lazy_return(i) for i in L ]</code>  과 <code class=\"language-text\">( lazy_return(i) for i in L )</code>  는 반환하는 객체가 일시에 실행되는지, 아니면 순차적으로 실행되는지 차이를 볼수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> time\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">print_iter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">iter</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> element <span class=\"token keyword\">in</span> <span class=\"token builtin\">iter</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">lazy_return</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sleep 1s\"</span><span class=\"token punctuation\">)</span>\n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 1초 쉰 다음에 실행되라</span>\n    <span class=\"token keyword\">return</span> num</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"comprehension_list=\"</span><span class=\"token punctuation\">)</span>\ncomprehension_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> lazy_return<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> L <span class=\"token punctuation\">]</span>\nprint_iter<span class=\"token punctuation\">(</span>comprehension_list<span class=\"token punctuation\">)</span>\n\ncomprehension_list<span class=\"token operator\">=</span>\nsleep 1s\nsleep 1s\nsleep 1s\nsleep 1s\nsleep 1s\nsleep 1s\nsleep 1s\nsleep 1s\nsleep 1s\nsleep 1s\n<span class=\"token number\">1</span>\n<span class=\"token number\">2</span>\n<span class=\"token number\">3</span>\n<span class=\"token number\">4</span>\n<span class=\"token number\">5</span>\n<span class=\"token number\">6</span>\n<span class=\"token number\">7</span>\n<span class=\"token number\">8</span>\n<span class=\"token number\">9</span>\n<span class=\"token number\">10</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"generator_exp=\"</span><span class=\"token punctuation\">)</span>\ngenerator_exp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span> lazy_return<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> L <span class=\"token punctuation\">)</span>\nprint_iter<span class=\"token punctuation\">(</span>generator_exp<span class=\"token punctuation\">)</span>\n\ngenerator_exp<span class=\"token operator\">=</span>\nsleep 1s\n<span class=\"token number\">1</span>\nsleep 1s\n<span class=\"token number\">2</span>\nsleep 1s\n<span class=\"token number\">3</span>\nsleep 1s\n<span class=\"token number\">4</span>\nsleep 1s\n<span class=\"token number\">5</span>\nsleep 1s\n<span class=\"token number\">6</span>\nsleep 1s\n<span class=\"token number\">7</span>\nsleep 1s\n<span class=\"token number\">8</span>\nsleep 1s\n<span class=\"token number\">9</span>\nsleep 1s\n<span class=\"token number\">10</span></code></pre></div>\n<h1 id=\"이걸-왜-쓰는가\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EA%B1%B8-%EC%99%9C-%EC%93%B0%EB%8A%94%EA%B0%80\" aria-label=\"이걸 왜 쓰는가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>이걸 왜 쓰는가?</strong></h1>\n<ul>\n<li>모두 게으른 연산때문에 iter을 쓴다. 게으른 연산을 쓰면 뭐가 좋을까? 언제쓸까?</li>\n<li>for 문은 연산의 순간을 결정할 수 없다. (계산 과정에서 손 놓고 있어야 한다.) 실행 과정에서 control flow 를 내가 계산할 수 있다라는 것은 대단한 이점이다.</li>\n<li>iterable 객체는 list 객체에 비해 메모리가 적다. 즉, 내가 가지고 있는 배열이 클 때 사용한다. iterable 객체는 데이터(저장 위치를 가리키는 포인터)를 가지고 있다가 하나씩 뱉기 때문에 배열 전체를 들고 있을 필요가 없다.</li>\n</ul>\n<h1 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h1>\n<ul>\n<li><a href=\"https://bluese05.tistory.com/55\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://bluese05.tistory.com/55</a></li>\n<li><a href=\"https://code-maven.com/list-comprehension-vs-generator-expression\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://code-maven.com/list-comprehension-vs-generator-expression</a></li>\n<li>컴퓨터 사이언스 부트캠프 with 파이썬 Computer Science Bootcampwith Python (양태환)</li>\n<li>전문가를 위한 파이썬</li>\n</ul>","fields":{"slug":"/posts/hello gatsby","tagSlugs":["/tag/test/"]},"frontmatter":{"date":"2020-08-19T22:40:32.169Z","description":"Cehck out.","tags":["test"],"title":"First Post in Gatsby","socialImage":"/media/42-line-bible.jpg"}}},"pageContext":{"slug":"/posts/hello gatsby"}}}